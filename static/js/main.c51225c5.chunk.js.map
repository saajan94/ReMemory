{"version":3,"sources":["components/Header/Header.js","components/ScoreBar/ScoreBar.js","components/ImageCard/ImageCard.js","components/Wrapper/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","title","description","rules","ScoreBar","score","ImageCard","onClick","imageClicked","src","image","alt","id","width","Wrapper","children","App","state","images","clickedImages","shuffleImages","array","sort","b","Math","random","imageClick","event","console","log","target","currentImage","_this","indexOf","alert","setState","concat","_this2","this","components_Header_Header","components_ScoreBar_ScoreBar","components_Wrapper_Wrapper","map","components_ImageCard_ImageCard","key","imageURL","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uyDAWeA,SARA,SAACC,GAAD,OACXC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yBAAyBJ,EAAMK,OAC7CJ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBJ,EAAMM,aACvCL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBJ,EAAMO,UCEhCC,SANE,SAACR,GAAD,OACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,oBAAYH,EAAMS,UCMXC,SARG,SAACV,GAAD,OACdC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOO,QAASX,EAAMY,cACjCX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OAAKU,IAAKb,EAAMc,MAAOC,IAAKf,EAAMgB,GAAIZ,UAAU,iBAAiBa,MAAM,aCKpEC,SARC,SAAClB,GAAD,OACZC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACVJ,EAAMmB,oBCsEJC,oNAlEbC,MAAQ,CACNZ,MAAO,EACPa,SACAC,cAAe,MAGjBC,cAAgB,SAAAC,GAEd,OADAA,EAAMC,KAAK,SAACxB,EAAGyB,GAAJ,MAAU,GAAMC,KAAKC,WACzBJ,KAGTK,WAAa,SAAAC,GACXC,QAAQC,IAAIF,EAAMG,QAClB,IAAMC,EAAeJ,EAAMG,OAAOnB,IACXqB,EAAKf,MAAME,cAAcc,QAAQF,IAAiB,GAGvEG,MAAM,aACNF,EAAKG,SAAS,CACZ9B,MAAO,EACPa,OAAQc,EAAKZ,cAAcF,GAC3BC,cAAe,MAGjBa,EAAKG,SAAS,CACZ9B,MAAO2B,EAAKf,MAAMZ,MAAQ,EAC1Ba,OAAQc,EAAKZ,cAAcF,GAC3BC,cAAea,EAAKf,MAAME,cAAciB,OAAOL,IAE/C,WAC2B,KAArBC,EAAKf,MAAMZ,QACb6B,MAAM,YACNF,EAAKG,SAAS,CACZ9B,MAAO,EACPa,OAAQc,EAAKZ,cAAcF,GAC3BC,cAAe,iFAOlB,IAAAkB,EAAAC,KACP,OACEzC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwC,EAAD,CACEtC,MAAM,wBACNC,YAAY,mCACZC,MAAM,yFAERN,EAAAC,EAAAC,cAACyC,EAAD,CAAUnC,MAAOiC,KAAKrB,MAAMZ,QAC5BR,EAAAC,EAAAC,cAAC0C,EAAD,KACGH,KAAKrB,MAAMC,OAAOwB,IAAI,SAAAhC,GAAK,OAC1Bb,EAAAC,EAAAC,cAAC4C,EAAD,CACEnC,aAAc6B,EAAKX,WACnBd,GAAIF,EAAME,GACVgC,IAAKlC,EAAME,GACXF,MAAOA,EAAMmC,sBA1DTC,cCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOxD,EAAAC,EAAAC,cAACuD,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c51225c5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Header.css\"\n\nconst Header = (props) => (\n    <header className=\"jumbotron jumbotron-fluid\">\n        <h1 className=\"display-3 text-center\">{props.title}</h1>\n        <p className=\"lead text-center\">{props.description}</p>\n        <p className=\"lead text-center\">{props.rules}</p>\n    </header>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./ScoreBar.css\"\n\nconst ScoreBar = (props) => (\n    <div className=\"scoreBar text-center\">\n        <h3>Score: {props.score}</h3>\n    </div>\n);\n\nexport default ScoreBar;","import React from \"react\";\nimport \"./ImageCard.css\"\n\nconst ImageCard = (props) => (\n    <div className=\"card\" onClick={props.imageClicked}>\n        <div className=\"img-container\">\n            <img src={props.image} alt={props.id} className=\"img-responsive\" width=\"100%\" />\n        </div>\n    </div>\n);\n\nexport default ImageCard;","import React from \"react\";\nimport \"./Wrapper.css\"\n\nconst Wrapper = (props) => (\n    <div className=\"container\">\n        <div className=\"wrapper\">\n            {props.children}\n        </div>\n    </div>\n);\n\nexport default Wrapper;","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport ScoreBar from './components/ScoreBar';\nimport ImageCard from './components/ImageCard';\nimport Wrapper from './components/Wrapper';\nimport images from './images.json';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    score: 0,\n    images,\n    clickedImages: []\n  };\n\n  shuffleImages = array => {\n    array.sort((a, b) => 0.5 - Math.random());\n    return array;\n  };\n\n  imageClick = event => {\n    console.log(event.target);\n    const currentImage = event.target.alt;\n    const alreadyClicked = this.state.clickedImages.indexOf(currentImage) > -1;\n\n    if (alreadyClicked) {\n      alert(\"You lost!\");\n      this.setState({\n        score: 0,\n        images: this.shuffleImages(images),\n        clickedImages: []\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        images: this.shuffleImages(images),\n        clickedImages: this.state.clickedImages.concat(currentImage)\n      },\n        () => {\n          if (this.state.score === 12) {\n            alert(\"You win!\");\n            this.setState({\n              score: 0,\n              images: this.shuffleImages(images),\n              clickedImages: []\n            });\n          }\n        });\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <Header\n          title=\"ReMemory: GoT Edition\"\n          description=\"A memory game made with React.js\"\n          rules=\"Click on an image to earn points, but remember not to click an image more than once!\"\n        />\n        <ScoreBar score={this.state.score} />\n        <Wrapper>\n          {this.state.images.map(image => (\n            <ImageCard\n              imageClicked={this.imageClick}\n              id={image.id}\n              key={image.id}\n              image={image.imageURL}\n            />\n          ))}\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}